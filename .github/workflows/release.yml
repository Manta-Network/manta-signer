name: Build and upload release binaries
on:
  pull_request:
    branches:
      - main
  release:
    types: [published]
jobs:
  setup:
    name: Get version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: echo "VERSION=$(cat Cargo.toml | grep ^version | awk -F'=' '{print $2}' | tr -d '\" ')" >> $GITHUB_ENV
    outputs:
      release_version: ${{ env.VERSION }}
  build:
    name: Build
    needs: setup
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            os_type: ubuntu
            artifact_name: manta-signer
            asset_name: manta-signer-linux-amd64
            version_suffix: 0
            target: linux
          - os: ubuntu-18.04
            os_type: ubuntu
            artifact_name: manta-signer
            asset_name: manta-signer-linux-amd64
            version_suffix: 1
            target: linux
          - os: ubuntu-22.04
            os_type: ubuntu
            artifact_name: manta-signer
            asset_name: manta-signer-linux-amd64
            version_suffix: 2
            target: linux
          - os: windows-2019
            os_type: windows
            artifact_name: manta-signer
            asset_name: manta-signer-windows
            version_suffix: 2
            target: win64
          - os: macos-latest
            os_type: macos
            artifact_name: manta-signer
            asset_name: manta-signer-macos-amd64
            version_suffix: 3
            target: darwin
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Cache Cargo build dir
        uses: actions/cache@v3
        env:
          cache-name: cache-cargo
        with:
          path: ~/.cargo
          key: ${{ matrix.os }}-build-${{ env.cache-name }}-${{ hashFiles('./ui/src-tauri/Cargo.lock') }}
          restore-keys: |
            ${{ matrix.os }}-build-${{ env.cache-name }}-
            ${{ matrix.os }}-build-
            ${{ matrix.os }}-
      - name: Cache target dir
        uses: actions/cache@v3
        env:
          cache-name: cache-target
        with:
          path: target
          key: ${{ matrix.os }}-build-${{ env.cache-name }}-${{ hashFiles('./Cargo.lock') }}
          restore-keys: |
            ${{ matrix.os }}-build-${{ env.cache-name }}-
            ${{ matrix.os }}-build-
            ${{ matrix.os }}-
      - name: Hack For Ubuntu Builds
        run: cd ui/src-tauri; sed -i /icns/d tauri.conf.json
        if: matrix.os_type == 'ubuntu'
      - name: Ubuntu Build Dependencies
        run: sudo apt-get update && sudo apt-get -y install libayatana-appindicator3-dev libwebkit2gtk-4.0-37 libgtk-3-dev patchelf librsvg2-dev
        if: matrix.os_type == 'ubuntu'
      - name: Suffix version
        id: suffixed
        run: ./scripts/check_ref.sh
        shell: bash
        env:
          BRANCH: ${{ github.head_ref }}
          TARGET: ${{ matrix.target }}
          VERSION: ${{ needs.setup.outputs.release_version }}
          SUFFIX: ${{ matrix.version_suffix }}
      - run: echo "SUFFIX ${{ steps.suffixed.outputs.SUFFIXED }}"
      - name: Append version suffix
        run: node ./scripts/suffix.js ${{ steps.suffixed.outputs.SUFFIXED }}
      - name: Build & Sign
        run: cd ui;yarn && yarn tauri build -v
        env:
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
      - name: Get release
        id: get_release
        uses: bruceadams/get-release@v1.2.3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: github.event_name == 'release' && github.event.action == 'published'
      - name: Upload .deb Package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: target/release/bundle/deb/manta-signer_${{ steps.suffixed.outputs.SUFFIXED }}_amd64.deb
          asset_name: manta-signer-${{ matrix.os }}_${{ needs.setup.outputs.release_version }}_amd64.deb
          asset_content_type: application/binary
        if: matrix.os_type == 'ubuntu' && github.event_name == 'release' && github.event.action == 'published'
      - name: Set release vars
        id: release_vars
        run: ./scripts/gen_filepath.sh ${{ matrix.os_type }} ${{ matrix.os }} ${{ steps.suffixed.outputs.SUFFIXED}}
        shell: bash
      - name: DBG
        run: echo "${{ steps.release_vars.outputs.IMAGE }} ${{ steps.release_vars.outputs.RELEASE_IMAGE }}" 
      - name: Upload Image
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: "target/release/bundle/${{ steps.release_vars.outputs.IMAGE }}"
          asset_name: "${{ steps.release_vars.outputs.RELEASE_IMAGE }}" 
          asset_content_type: application/binary
        if: github.event_name == 'release' && github.event.action == 'published'
      - name: Content Hash
        id: content_hash
        run: echo "::set-output name=HASH::${{ hashFiles( env.FILE ) }}"
        env:
          FILE: 'target/release/bundle/${{ steps.release_vars.outputs.IMAGE }}'
      - name: Upload Updater package
        id: updater
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: "target/release/bundle/${{ steps.release_vars.outputs.IMAGE_UPDATE }}"
          asset_name: "${{ steps.release_vars.outputs.RELEASE_IMAGE_UPDATE }}"
          asset_content_type: application/binary
        if: github.event_name == 'release' && github.event.action == 'published'
      - name: Upload Updater signature
        id: sig
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: "target/release/bundle/${{ steps.release_vars.outputs.UPDATE_SIG }}"
          asset_name: "${{ steps.release_vars.outputs.RELEASE_UPDATE_SIG }}"
          asset_content_type: application/binary
        if: github.event_name == 'release' && github.event.action == 'published'
      - run: curl -L ${{ steps.sig.outputs.browser_download_url }} > sig.txt
        if: github.event_name == 'release' && github.event.action == 'published'
      - name: Capture Sig
        id: sig_out
        run: echo "::set-output name=SIG::$(cat sig.txt)"
        if: github.event_name == 'release' && github.event.action == 'published'
      - run: echo "::set-output name=EXPIRY::$(node -e 'console.log(Math.floor(Date.now()/1000) + 300)')"
        id: expiry
        if: github.event_name == 'release' && github.event.action == 'published'
      - name: JWT Generator
        id: jwtGenerator
        uses: morzzz007/github-actions-jwt-generator@1.0.1
        with:
          secret: ${{ secrets.JWT_SECRET }}
          payload: "{\"user\":\"updates\", \"exp\": ${{ steps.expiry.outputs.EXPIRY }}}"
        if: github.event_name == 'release' && github.event.action == 'published'
      - name: Notify updater server
        uses: satak/webrequest-action@master
        with:
          url: https://updates.signer.manta.systems/new_release/${{ matrix.target }}/${{ steps.suffixed.outputs.SUFFIXED }}
          method: POST
          payload: "{\"target\": \"${{ matrix.target }}\", \"version\": \"${{ steps.suffixed.outputs.SUFFIXED }}\", \"release_notes\": \"Release page: ${{ github.event.release.html_url }}\\n SHA-256: ${{ steps.content_hash.outputs.HASH }}\\n \", \"url\": \"${{ steps.updater.outputs.browser_download_url }}\", \"signature\": \"${{ steps.sig_out.outputs.SIG }}\" }"
          headers: "{\"Authorization\": \"Bearer ${{ steps.jwtGenerator.outputs.token }}\"}"
        if: github.event_name == 'release' && github.event.action == 'published'
