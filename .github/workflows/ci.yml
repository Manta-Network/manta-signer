# name: CI
# on:
#   pull_request:
#   push:
#     branches:
#       - 'main'
#   schedule:
#     - cron: '0 0 * * */2'
# concurrency:
#   group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
#   cancel-in-progress: true
# env:
#   CARGO_TERM_COLOR: always
#   RUSTFLAGS: -D warnings
#   RUST_BACKTRACE: full
# jobs:
#   format:
#     name: Format
#     runs-on: ubuntu-latest
#     steps:
#     - uses: actions/checkout@v3
#     - run: rustup update nightly && rustup default nightly && rustup component add rustfmt
#     - run: cargo fmt --all -- --check
#   format-cargo-toml:
#     name: Format Crate Configuration Files
#     runs-on: ubuntu-latest
#     steps:
#     - uses: actions/checkout@v3
#     - run: rustup update nightly && rustup default nightly
#     - run: cargo install cargo-sort
#     - run: cargo sort --workspace --check
#   docs:
#     name: Build Documentation
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v3
#       - run: rustup update nightly && rustup default nightly
#       - run: RUSTDOCFLAGS="-D warnings --cfg doc_cfg" cargo +nightly doc --all-features --no-deps --document-private-items
#   lint:
#     name: Lint (${{ matrix.os }} + ${{ matrix.channel }})
#     needs: [format, format-cargo-toml, docs]
#     strategy:
#       fail-fast: false
#       matrix:
#         os:
#           - ubuntu-latest
#         channel:
#           - stable
#           - nightly
#     runs-on: ${{ matrix.os }}
#     steps:
#       - uses: actions/checkout@v3
#       - run: rustup update ${{ matrix.channel }} && rustup default ${{ matrix.channel }} && rustup component add clippy
#       - run: cargo install cargo-hack
#       - run: cargo hack clippy --feature-powerset
#       - run: cargo hack clippy --feature-powerset --bins
#       - run: cargo hack clippy --feature-powerset --examples
#       - run: cargo hack clippy --feature-powerset --tests
#   test:
#     name: Test (${{ matrix.os }} + ${{ matrix.channel }})
#     needs: [format, format-cargo-toml, docs]
#     strategy:
#       fail-fast: false
#       matrix:
#         os:
#           - macos-latest
#           - ubuntu-latest
#           - windows-latest
#         channel:
#           - stable
#           - nightly
#     runs-on: ${{ matrix.os }}
#     steps:
#       - uses: actions/checkout@v3
#       - run: rustup update ${{ matrix.channel }} && rustup default ${{ matrix.channel }}
#       - run: cargo install cargo-nextest
#       - run: cargo nextest run --release --all-features
#   compile-bench:
#     name: Compile Benchmarks (${{ matrix.os }} + ${{ matrix.channel }})
#     needs: [format, format-cargo-toml, docs]
#     strategy:
#       fail-fast: false
#       matrix:
#         os:
#           - macos-latest
#           - ubuntu-latest
#           - windows-latest
#         channel:
#           - stable
#           - nightly
#     runs-on: ${{ matrix.os }}
#     steps:
#       - uses: actions/checkout@v3
#       - run: rustup update ${{ matrix.channel }} && rustup default ${{ matrix.channel }}
#       - run: cargo bench --no-run --all-features
